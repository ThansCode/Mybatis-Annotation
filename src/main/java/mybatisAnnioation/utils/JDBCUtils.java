package mybatisAnnioation.utils;

import com.mysql.jdbc.Driver;

import java.sql.*;
import java.util.List;

/**
 * @program: XMind
 * @description
 * @author: yihang
 * @create: 2020-07-31 21:41
 **/
public class JDBCUtils {
    private static String connect;
    private static String driverClassName;
    private static String URL;
    private static String username;
    private static String password;
    private static boolean autoCommit;
    // 连接超时时间
    private static final int TIME_OUT = 3;

    /** 声明一个 Connection类型的静态属性，用来缓存一个已经存在的连接对象 */
    private static Connection conn;

    static {
        initConfig();
    }

    /***
     * 加载初始信息
     */
    private static void initConfig(){
        // 设定信息
        driverClassName = PropertiesUtil.getProperty("jdbc.driver","");
        URL = PropertiesUtil.getProperty("jdbc.url","");
        username = PropertiesUtil.getProperty("jdbc.user","");
        password = PropertiesUtil.getProperty("jdbc.password","");
        // 自动提交
        autoCommit = false;
    }

    /***
     * 获取连接
     * @return
     */
    public static Connection getConnection(){
        // 在连接失效的情况下获取连接
        if ( isValid() ){
            try {
                //加载驱动
                Class.forName(driverClassName);
                // 创建连接
                conn = DriverManager.getConnection(URL,username,password);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return conn;
    }
    /**
     * 判断连接是否有效
     *  失效则返回 true
     *  有效返回 false
     * @return true / false
     */
    private static boolean isValid() {
        if (conn != null) {
            try {
                // 超时 或者关闭都认定为连接失效
                //isValid方法是判断Connection是否有效,如果连接尚未关闭并且仍然有效，
                if (conn.isClosed() || !conn.isValid(TIME_OUT)) {
                    return true;
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
             //conn 既不是 null 且也没有关闭 ，且 isValid 返回 true，说明是可以使用的
            // 返回 false
            return false;
        }
        // 连接为空 为获取连接
        return true;
    }

    /**
     * 事务控制
     * 设置是否自动提交事务
     */
    private static void transaction() {
        try {
            conn.setAutoCommit(autoCommit);
        } catch (SQLException e) {
            System.out.println("设置事务的提交方式为 : " + (autoCommit ? "自动提交" : "手动提交") + " 时失败: " + e.getMessage());
        }

    }

    /***
     * 事务提交
     * @param con
     */
    private static void commit(Connection con) {
        if (con != null && !autoCommit) {
            try {
                con.commit();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /***
     * 事务回滚
     * @param con
     */
    private static void rollback(Connection con) {
        if (con!= null && !autoCommit) {
            try {
                con.rollback();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /***
     * 执行查询语句
     * @param sql
     * @param paramValueList
     * @return
     * @throws SQLException
     */
    public static ResultSet query(String sql, List<Object> paramValueList) throws SQLException {
        //执行sql语句
        // 仅执行查询语句信息
        if (sql == null || sql.trim().isEmpty()
                || !sql.trim().toLowerCase().startsWith("select")) {
            throw new RuntimeException("你的SQL语句为空或不是查询语句");
        }
        ResultSet rs = null;
        // 说明执行带参数信息
        if( paramValueList.size() > 0 && paramValueList != null) {
            // 生成预编译sql
            PreparedStatement preparedStatement = prepare(sql,false);
            // 为sql设定内容
            for(int i = 0 ; i < paramValueList.size() ; i ++ ) {
                // 这里注意位置从1开始计算
               preparedStatement.setObject(i+1,paramValueList.get(i));
            }
            // 执行
            rs = preparedStatement.executeQuery();
        }else{
            // 无参方法
            Statement statement = createStatement();
            // 执行查询语句信息
            try {
                rs = statement.executeQuery(sql);
            } catch (SQLException e) {
                System.out.println("执行无参SQL失败: " + e.getMessage());
            }
        }

        return  rs;
    }

    /***
     * 处理insert语句信息
     * @param insertSql
     * @param autoGeneratedKeys 是否获取生成的键集
     * @param paramValueList 参数信息
     * @return
     */
    public static Object insert(String insertSql, boolean autoGeneratedKeys, List<Object> paramValueList) {
        // 记录键信息
        int keys = -1;
        if (insertSql == null || insertSql.trim().isEmpty()) {
            throw new RuntimeException("你没有指定SQL语句，请检查是否指定了需要执行的SQL语句");
        }
        // 如果不是 insert 开头开头的语句
        if (!insertSql.trim().toLowerCase().startsWith("insert")) {
            System.out.println(insertSql.toLowerCase());
            throw new RuntimeException("你指定的SQL语句不是插入语句，请检查你的SQL语句");
        }

        if( paramValueList != null && paramValueList.size() > 0){
            PreparedStatement ps = prepare(insertSql,false);
            // 设定参数
            for (int i = 0 ; i < paramValueList.size() ; i ++ ) {
                try {
                    ps.setObject(i+1,paramValueList.get(i));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            // 数据保存
            try {
                int count =  ps.executeUpdate();
                // 如果希望获得数据库产生的键
                if (autoGeneratedKeys) {
                    // 获得数据库产生的键集
                    ResultSet rs = ps.getGeneratedKeys();
                    // 因为是保存的是单条记录，因此至多返回一个键
                    // 获得值并赋值给 var 变量
                    if (rs.next()) {
                        keys = rs.getInt(1);
                    }
                } else {
                    // 如果不需要获得，则将受SQL影像的记录数赋值给 keys 变量
                    keys = count;
                }
                // 提交
                commit(conn);
            } catch (SQLException e) {
                System.out.println("数据保存失败");
                rollback(conn);
            }
        }else{
            // insert语句未提供参数信息
            Statement st = createStatement();
            try {
                keys = st.executeUpdate(insertSql);
                commit(conn);
            } catch (SQLException e) {
                System.out.println("检查inser语句的参数情况，并未提供参数占位信息！！！");
                rollback(conn);
            }
        }
        return keys;
    }

    /***
     * 创建无参statment语句信息
     * @return
     */
    private static Statement createStatement() {
        Statement statement = null;
        // 创建连接
        getConnection();
        transaction();
        try {
            statement = conn.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return statement;
    }


    /**
     * 根据给定的带参数占位符的SQL语句，创建 PreparedStatement 对象
     *
     * @param sql
     *            带参数占位符的SQL语句
     * @return 返回相应的 PreparedStatement 对象
     */
    private static PreparedStatement prepare(String sql, boolean autoGeneratedKeys) {
        // 创建连接
        getConnection();
        // 设置事务控制信息
        transaction();
        PreparedStatement ps = null;
        /* 设置事务的提交方式 */
        try {
            if (autoGeneratedKeys) {
                //使用 PreparedStatement.RETURN_GENERATED_KEYS  可以获取刚刚插入自增ID值
                ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            } else {
                ps = conn.prepareStatement(sql);
            }
        } catch (SQLException e) {
            System.out.println("创建 PreparedStatement 对象失败: " + e.getMessage());
        }

        return ps;
    }



}
